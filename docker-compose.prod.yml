version: '3.8'

networks:
  ecommerce-network:
    driver: bridge

services:
  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "80:80"
    networks:
      - ecommerce-network
    depends_on:
      api-gateway:
        condition: service_healthy
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
      target: production
    ports:
      - "4000:3000"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - CART_SERVICE_URL=http://cart-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - ML_SERVICE_URL=http://ml-service:3005
    networks:
      - ecommerce-network
    depends_on:
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Authentication Service
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/ecommerce_auth?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGODB_URI=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/ecommerce_products?authSource=admin
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Cart Service
  cart-service:
    build:
      context: ./backend/cart-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3003
      - REDIS_URL=redis://redis:6379
    networks:
      - ecommerce-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - PORT=3004
      - MONGODB_URI=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/ecommerce_orders?authSource=admin
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ML Recommendation Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
      target: production
    environment:
      - FLASK_ENV=production
      - PORT=3005
      - MONGODB_URI=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/ecommerce_ml?authSource=admin
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: mongod --auth

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  mongodb_data:
  redis_data: