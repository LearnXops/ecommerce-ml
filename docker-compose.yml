version: '3.8'

networks:
  ecommerce-network:
    driver: bridge

services:
  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:4000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - ecommerce-network
    depends_on:
      - api-gateway
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
      target: development
    command: ["node", "src/index.js"]
    ports:
      - "4000:3000"
    environment:
      - NODE_ENV=development
      - JWT_SECRET=your-jwt-secret-key
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - CART_SERVICE_URL=http://cart-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - ML_SERVICE_URL=http://ml-service:3005
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules
    networks:
      - ecommerce-network
    depends_on:
      - auth-service
      - product-service
      - cart-service
      - order-service
      - ml-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Authentication Service
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/ecommerce_auth?authSource=admin
      - JWT_SECRET=your-jwt-secret-key
      - JWT_EXPIRES_IN=7d
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/ecommerce_products?authSource=admin
    volumes:
      - ./backend/product-service:/app
      - /app/node_modules
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Cart Service
  cart-service:
    build:
      context: ./backend/cart-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/ecommerce_products?authSource=admin
    volumes:
      - ./backend/cart-service:/app
      - /app/node_modules
    networks:
      - ecommerce-network
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/ecommerce_orders?authSource=admin
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USER=your-email@gmail.com
      - EMAIL_PASS=your-app-password
    volumes:
      - ./backend/order-service:/app
      - /app/node_modules
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ML Recommendation Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3005:3005"
    environment:
      - FLASK_ENV=development
      - PORT=3005
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/ecommerce_ml?authSource=admin
    volumes:
      - ./ml-service:/app
    networks:
      - ecommerce-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: mongod --auth

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  mongodb_data:
  redis_data: